package main

import (
	"github.com/sirupsen/logrus"
	"log"
	"logstream/logstream"
	"net/http"
)

// Middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞–Ω–∏–∫
func panicRecoveryMiddleware(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		defer func() {
			if r := recover(); r != nil {
				logrus.Errorf("üò± Panic recovered: %v", r)
				http.Error(w, "Internal Server Error", http.StatusInternalServerError)
			}
		}()
		next.ServeHTTP(w, r)
	})
}

func main() {
	logstream.InitLogger()

	mux := http.NewServeMux()
	mux.HandleFunc("/", func(w http.ResponseWriter, r *http.Request) {
		// –í–∞—à –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å –ø–∞–Ω–∏–∫—É
		panic("Test panic!")
	})
	mux.HandleFunc("/ws", logstream.HandleConnections)

	// –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤ middleware
	wrappedMux := panicRecoveryMiddleware(mux)

	log.Println("Starting server on :8080")
	err := http.ListenAndServe(":8080", wrappedMux)
	if err != nil {
		log.Fatalf("‚ùå Failed to start server: %+v", err)
	}
}
